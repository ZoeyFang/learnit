以下是本地版本库操作，在gitbash命令行执行

$mkdir 新建文件夹
$git init 把文件夹变成git仓库
$git add readme.txt  添加文件到stage(暂存区)
$git commit -m "提交说明"  把暂存区的文件提交到master（当前分支）
$git status 查看状态
$git diff "readme.txt" 查看与上一个版本差异
     $git diff    #是工作区(work dict)和暂存区(stage)的比较
     $git diff --cached    #是暂存区(stage)和分支(master)的比较
$git log 查看提交日志
$git log --pretty=oneling 简洁日志
$git reflog 查看版本日志，包括回退操作
$git reset --hard HEAD^ 回退到上一个版本，HEAD^可以是任意commit id,也可以写成HEAD~1,HEAD~100
$git log --graph --pretty=format:'%h -%d &s(%cr) --abbrev-commit --reflog    查看操作日志，带时间
$gitk 显示可视化版本树   


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销（用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。），这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

小结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

$ git rm test.txt  删除版本库文件(本地已删除，版本库还有时)，如果是删错了，那就git checkout -- test.txt还原回来


$ ssh-keygen -t rsa -C "youremail@example.com"  一路回车，创建SSH Key（公钥可以公开，私钥保密），在githup上add SSH key（公钥），添加了公钥即允许该电脑对远程库进行更改操作



/************已有本地库，创建一个远程库********************
##githup上的教程：
…or create a new repository on the command line

echo "# learnit" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/ZoeyFang/learnit.git   --git remote add origin git@github.com/ZoeyFang/learnit.git
git push -u origin master

git remote rm origin 删除远程库
************已有本地库，创建一个远程库********************/

/************先创建远程库，再拷贝到本地*******************
项目右上角 clone and download,可以切换协议，use SSH 或者use https，原生的SSH协议比较快
$ git clone https://github.com/ZoeyFang/gitskills.git   --使用https协议
$ git clone git@github.com:michaelliao/gitskills.git   --使用git协议
************先创建远程库，再拷贝到本地*******************/


/*********git的分支***************************
多个人一起协作时，可以创建一个自己的分支，这样可以随时修改随时提交，且不会影响到他人工作（他人的视图还是master分支，dev分支只有自己看得到），等工作完成，再把dev分支和master分支合并，删除dev分支即可
git保存的是修改，切换不同的分支时修改下节点就好了，因而git分支的新建和合并是非常快的
$git checkout -b dev  创建并切换到dev分支
    相当于$git checkout dev  创建dev分支
	      $git branch dev 切换到dev分支
$git branch 查看当前项目有多少个分支，自己所处的分支前面会标星号（*）
$git merge dev 切换到master分支执行该命令，表示把dev分支融合到master分支
$git branch -d dev 删除dev分支即可
    $git push origin :dev 删除远程分支dev，origin和:dev之间有空格
    $git branch -D feature-vulcanGit   要删除没有合并的分支，需要强行删除-D
要是多个分支修改了同一个文件，合并时会报冲突，需要手动处理。
	
用带参数的git log也可以看到分支的合并情况：
$ git log --graph --pretty=oneline --abbrev-commit
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 & simple
|/
* fec145a branch test

如果没有冲突，合并且删除分支后，就只有一条主线，不会像上面这样可以看得到分支情况，如果想要保留分支信息，就加no-ff
git merge --no-ff -m "merge with no-ff" dev
实际开发中，master分支是主线，应该保证它是稳定的，dev分支是大家协作开发用的，每个人从dev分支上分出自己的分支，写完后合并到dev分支上，dev确保没问题了，再合并到master分支上发布
******************git的分支*********************************/

/***********git stash暂存现场*****************************
修复bug时，可以通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成不想提交时，可以先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
git stash 保存工作现场，此时暂存区（stage）是干净的，可以放心去创建新的分支，修复bug等
git stash list 查看保存的工作现场
git stash apply 恢复工作现场，不删除stash
git stash apply stash@{0}  恢复指定的工作现场，不删除stash
git stash drop 删除stash内容
git stash pop  恢复工作现场，并删除stash内容

$ git stash
Saved working directory and index state WIP on master: 4bba265 how to deal with conflicts

$ git stash list
stash@{0}: WIP on master: 4bba265 how to deal with conflicts

$ git stash apply
On branch master
Your branch is ahead of 'o/master' by 5 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   HowtoUseGit.txt

no changes added to commit (use "git add" and/or "git commit -a")

***********git stash暂存现场*****************************/


/*********多人协作，这一部分要用的时候要再看一下，还没练习*******************************
$git remote 查看远程库信息
    $git remote -v 查看远程库信息
$git push origin master 把master分支推送到远程库origin上
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；（在本地还是可以看到bug分支信息的（用no-ff），但是远程库上只会记录每次push的信息）
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

$git clone git@github.com:ZoeyFang/learnit.git
因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
*****************多人协作*******************************/

/***************标签****************************
Git有commit，为什么还要引入tag？
“请把上周一的那个版本打包发布，commit号是6a5819e...”
“一串乱七八糟的数字不好找！”
如果换一个办法：
“请把上周一的那个版本打包发布，版本号是v1.2”
“好的，按照tag v1.2查找commit就行！”
所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

可以理解为ip和域名的关系

$git tag v1.0 用于新建一个标签，默认为HEAD(最新提交的commit上)，也可以指定一个commit id；
$git tag -a <tagname> -m "blablabla..." <commit id>  可以指定标签信息,commit id默认是HEAD；
$git tag 查看所有标签。
$git push origin v1.0 推送本地标签v1.0到远程库；
$git push origin --tags 推送全部未推送过的本地标签；
$git tag -d v1.0 删除本地标签v1.0
$git push origin :refs/tags/v1.0 删除远程标签v1.0(要先删除本地的，再删除远程的)，注意origin和：中间有个空格
要回退到某个版本，可以先git show v1.0，查看v1.0的commit id，然后再回退git reset --hard <commit id>
ctrl+c 退出当前命令行
****************标签*******************************/

/********************码云*********************
优点：在国内，访问速度比较快
注意，新建项目时不要让他自动生成readme.txt，否则从本地提交时会报错，需要先pull
码云可以直接在网页上删除项目，很方便，但是也要小心，删错了就恢复不了了
码云的操作不够简洁，每次重要操作都要输入密码确认，比较麻烦。
****************码云**************************/

后续还有搭建git服务器（基于Linux）和一些自定义操作，后面再学习，别名先不急着偷懒，把命令给敲熟了
